{"ast":null,"code":"var _jsxFileName = \"/Users/marving/Documents/CRUSHING IT/webDevelopment/101s/React/react-food-order-app/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_CART_ITEM\") {\n    const updatedItems = state.items.concat(action.item); //.contact(): Add a new item to an array, BUT return a brand new array with the whole (immutable)\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nfunction CartProvider(props) {\n  _s();\n\n  // useReducer(pointing at reducer function, set an initial state ):\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); // useReducer return an array with 2 differents elements:\n  //1) State snapshot (so named cartState) 2) Function that allow us to dispatch an action to the reducer (so dispatchCartAction)\n  // Helpers to dispatch:\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD_CART_ITEM\",\n      item: item\n    });\n  }; // item: point at the argument (item)\n\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE_CART_ITEM\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    item: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"sources":["/Users/marving/Documents/CRUSHING IT/webDevelopment/101s/React/react-food-order-app/src/store/CartProvider.js"],"sourcesContent":["import { useReducer } from \"react\";\n\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_CART_ITEM\") {\n    const updatedItems = state.items.concat(action.item);\n    //.contact(): Add a new item to an array, BUT return a brand new array with the whole (immutable)\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n\n  return defaultCartState;\n};\n\nfunction CartProvider(props) {\n  // useReducer(pointing at reducer function, set an initial state ):\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n  // useReducer return an array with 2 differents elements:\n  //1) State snapshot (so named cartState) 2) Function that allow us to dispatch an action to the reducer (so dispatchCartAction)\n\n  // Helpers to dispatch:\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD_CART_ITEM\", item: item });\n  };\n  // item: point at the argument (item)\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE_CART_ITEM\", id: id });\n  };\n\n  const cartContext = {\n    item: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n}\nexport default CartProvider;\n"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EADgB;EAEvBC,WAAW,EAAE;AAFU,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACrC,IAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;IACnC,MAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB,CADmC,CAEnC;;IACA,MAAMC,kBAAkB,GACtBN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MADtD;IAGA,OAAO;MACLX,KAAK,EAAEM,YADF;MAELL,WAAW,EAAEQ;IAFR,CAAP;EAID;;EAED,OAAOV,gBAAP;AACD,CAdD;;AAgBA,SAASa,YAAT,CAAsBC,KAAtB,EAA6B;EAAA;;EAC3B;EACA,MAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkClB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD,CAF2B,CAM3B;EACA;EAEA;;EACA,MAAMiB,oBAAoB,GAAIR,IAAD,IAAU;IACrCO,kBAAkB,CAAC;MAAEV,IAAI,EAAE,eAAR;MAAyBG,IAAI,EAAEA;IAA/B,CAAD,CAAlB;EACD,CAFD,CAV2B,CAa3B;;;EAEA,MAAMS,yBAAyB,GAAIC,EAAD,IAAQ;IACxCH,kBAAkB,CAAC;MAAEV,IAAI,EAAE,kBAAR;MAA4Ba,EAAE,EAAEA;IAAhC,CAAD,CAAlB;EACD,CAFD;;EAIA,MAAMC,WAAW,GAAG;IAClBX,IAAI,EAAEM,SAAS,CAACd,KADE;IAElBC,WAAW,EAAEa,SAAS,CAACb,WAFL;IAGlBmB,OAAO,EAAEJ,oBAHS;IAIlBK,UAAU,EAAEJ;EAJM,CAApB;EAMA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEE,WAA7B;IAAA,UACGN,KAAK,CAACS;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GA9BQV,Y;;KAAAA,Y;AA+BT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}